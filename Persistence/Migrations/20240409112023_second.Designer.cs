// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240409112023_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MenuGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MenuGroupPricingOption")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaxPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuItemPricingOption")
                        .HasColumnType("int");

                    b.Property<decimal?>("MiniPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ModifierGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModifierGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifierGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifierItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifierGroupId");

                    b.ToTable("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PriceListEntries");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("PriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RangePriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("TimeSpecificPriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaiterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.PaymentGateway.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53b937b9-39f0-40be-b118-d211c56b6e4e"),
                            Name = "Menu Settings"
                        },
                        new
                        {
                            Id = new Guid("86282af6-436b-4b95-ab13-16a0f21615b0"),
                            Name = "Cash Register"
                        },
                        new
                        {
                            Id = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da"),
                            Name = "Till"
                        },
                        new
                        {
                            Id = new Guid("acc372c0-6dbe-4ac9-8900-f7d19276ae9d"),
                            Name = "Tickets"
                        },
                        new
                        {
                            Id = new Guid("a4ab07ea-d693-4cc7-bc9f-b470a1a753c7"),
                            Name = "Table Ordering"
                        },
                        new
                        {
                            Id = new Guid("52408be2-2c00-4902-962e-25f989eee7ac"),
                            Name = "Kitchen Display System"
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubPermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubPermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("959c6871-a075-4ca0-a79d-c27f4626abea"),
                            PermissionId = new Guid("53b937b9-39f0-40be-b118-d211c56b6e4e"),
                            RoleId = new Guid("3cc585b7-0380-4d76-98c4-237d26308743")
                        },
                        new
                        {
                            Id = new Guid("ef6fd583-adc5-4b43-a9a0-a779ec4b9d8c"),
                            PermissionId = new Guid("86282af6-436b-4b95-ab13-16a0f21615b0"),
                            RoleId = new Guid("3cc585b7-0380-4d76-98c4-237d26308743")
                        },
                        new
                        {
                            Id = new Guid("b6a8c41c-c468-4d21-ab54-9d3475ef5af9"),
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da"),
                            RoleId = new Guid("3cc585b7-0380-4d76-98c4-237d26308743")
                        },
                        new
                        {
                            Id = new Guid("cf58adbb-eb18-4d80-8040-295ec10f39ad"),
                            PermissionId = new Guid("acc372c0-6dbe-4ac9-8900-f7d19276ae9d"),
                            RoleId = new Guid("3cc585b7-0380-4d76-98c4-237d26308743")
                        },
                        new
                        {
                            Id = new Guid("208a6495-5e15-42f8-8149-831fd8ffa272"),
                            PermissionId = new Guid("a4ab07ea-d693-4cc7-bc9f-b470a1a753c7"),
                            RoleId = new Guid("3cc585b7-0380-4d76-98c4-237d26308743")
                        },
                        new
                        {
                            Id = new Guid("9f4a154c-a178-4bf9-a9ba-d82a19599efc"),
                            PermissionId = new Guid("52408be2-2c00-4902-962e-25f989eee7ac"),
                            RoleId = new Guid("3cc585b7-0380-4d76-98c4-237d26308743")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("SubPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cb886a2-07f1-413b-baaa-57ce7e61847a"),
                            Name = "Create Category",
                            PermissionId = new Guid("53b937b9-39f0-40be-b118-d211c56b6e4e")
                        },
                        new
                        {
                            Id = new Guid("a10f2a38-a328-49fa-a566-c4e19debb001"),
                            Name = "Create Menu",
                            PermissionId = new Guid("53b937b9-39f0-40be-b118-d211c56b6e4e")
                        },
                        new
                        {
                            Id = new Guid("85aced5f-a3ee-44ca-9686-89a4ed68172f"),
                            Name = "Add Item",
                            PermissionId = new Guid("53b937b9-39f0-40be-b118-d211c56b6e4e")
                        },
                        new
                        {
                            Id = new Guid("9fc86b22-18ab-4d49-80cd-b42bb338b818"),
                            Name = "Inventory Management",
                            PermissionId = new Guid("86282af6-436b-4b95-ab13-16a0f21615b0")
                        },
                        new
                        {
                            Id = new Guid("113cda9f-7895-4e19-9765-26787e63a546"),
                            Name = "POS Integration",
                            PermissionId = new Guid("86282af6-436b-4b95-ab13-16a0f21615b0")
                        },
                        new
                        {
                            Id = new Guid("ffed8967-146e-4be2-863d-b9808464e33e"),
                            Name = "Hardware Integration",
                            PermissionId = new Guid("86282af6-436b-4b95-ab13-16a0f21615b0")
                        },
                        new
                        {
                            Id = new Guid("f6c2de19-ded9-498c-995c-4f97bf61c251"),
                            Name = "Order Management",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("b999a3d5-667a-45ba-91fc-6fbde752c1c2"),
                            Name = "Ticket",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("f4437b8a-13d2-4f47-aa9e-e0dd9e2d1d1e"),
                            Name = "Discount",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("06dd3190-a2c0-4bec-a924-d3f18bbec87a"),
                            Name = "Refunds",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("982cfa3d-4124-4929-af6b-854c0a7b165d"),
                            Name = "Cancel Or Void Order",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("0b7e5497-596d-4fc7-876a-33c51e67b9ac"),
                            Name = "Tips",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("06b8bef8-7a57-42e6-854d-759c44876ce9"),
                            Name = "EOD Balance Of Account",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("5c921c02-0dc3-48bb-ae3c-3e6693f2af8b"),
                            Name = "Sync To Cloud",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("fe6f7a9f-52cf-4a94-bd12-bebea0510893"),
                            Name = "Order Chat",
                            PermissionId = new Guid("10ed40b6-6d51-4fc0-bab4-80e1168344da")
                        },
                        new
                        {
                            Id = new Guid("b71beff5-7e5b-497b-ae65-1689a559aea6"),
                            Name = "View All Tickets",
                            PermissionId = new Guid("acc372c0-6dbe-4ac9-8900-f7d19276ae9d")
                        },
                        new
                        {
                            Id = new Guid("42189a5c-90cd-4a57-8634-ef8fc6137b55"),
                            Name = "View Ticket Status",
                            PermissionId = new Guid("acc372c0-6dbe-4ac9-8900-f7d19276ae9d")
                        },
                        new
                        {
                            Id = new Guid("70098483-eab1-4762-b9ba-b377f4b65587"),
                            Name = "Void Ticket Transactions",
                            PermissionId = new Guid("acc372c0-6dbe-4ac9-8900-f7d19276ae9d")
                        },
                        new
                        {
                            Id = new Guid("45f1dcdd-535d-4a84-b095-84aa82c7319b"),
                            Name = "Refund Ticket",
                            PermissionId = new Guid("acc372c0-6dbe-4ac9-8900-f7d19276ae9d")
                        },
                        new
                        {
                            Id = new Guid("a53d3791-cb61-44e0-ab4b-166200fbb35c"),
                            Name = "Access Handheld Devices With Pin",
                            PermissionId = new Guid("a4ab07ea-d693-4cc7-bc9f-b470a1a753c7")
                        },
                        new
                        {
                            Id = new Guid("9783109c-eefd-4972-8c11-1126c47575be"),
                            Name = "Mirror Cash Register Privileges",
                            PermissionId = new Guid("a4ab07ea-d693-4cc7-bc9f-b470a1a753c7")
                        },
                        new
                        {
                            Id = new Guid("227c5310-3de4-4b02-b8a4-9cf9383e089e"),
                            Name = "View Order",
                            PermissionId = new Guid("52408be2-2c00-4902-962e-25f989eee7ac")
                        },
                        new
                        {
                            Id = new Guid("6923b19b-c5b9-4938-bc90-4405291242fe"),
                            Name = "Fulfill Order",
                            PermissionId = new Guid("52408be2-2c00-4902-962e-25f989eee7ac")
                        },
                        new
                        {
                            Id = new Guid("22e633a1-a35b-4e9b-8ec0-bd5ef95ca405"),
                            Name = "View Order Status",
                            PermissionId = new Guid("52408be2-2c00-4902-962e-25f989eee7ac")
                        },
                        new
                        {
                            Id = new Guid("7647468d-d476-4c8a-9838-57e2660442db"),
                            Name = "Edit Order Status",
                            PermissionId = new Guid("52408be2-2c00-4902-962e-25f989eee7ac")
                        },
                        new
                        {
                            Id = new Guid("de5f7658-de9b-4367-ab6b-91a2fd2d558a"),
                            Name = "Order Chat",
                            PermissionId = new Guid("52408be2-2c00-4902-962e-25f989eee7ac")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuest")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.KYC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderOrBusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BusinessFiscalYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusinessFiscalYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredHomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cc585b7-0380-4d76-98c4-237d26308743"),
                            CreatedBy = "Auto",
                            Description = "Owner",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PincodeVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany("MenuGroups")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuGroups")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuGroup", "MenuGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.ModifierGroup", null)
                        .WithMany("ModifierItems")
                        .HasForeignKey("ModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("Prices")
                        .HasForeignKey("PriceListEntryId");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("RangePrices")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("TimeSpecificPrice")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Tab", "Tab")
                        .WithMany("Orders")
                        .HasForeignKey("TabId");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.PaymentGateway.Payment", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Domain.Domain.Modules.PaymentGateway.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.SubPermission", "SubPermission")
                        .WithMany()
                        .HasForeignKey("SubPermissionId");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("SubPermission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Guests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Tabs")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RangePrices");

                    b.Navigation("TimeSpecificPrice");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Navigation("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Navigation("MenuGroups");

                    b.Navigation("MenuItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
