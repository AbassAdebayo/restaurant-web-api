// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MenuGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MenuGroupPricingOption")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaxPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuItemPricingOption")
                        .HasColumnType("int");

                    b.Property<decimal?>("MiniPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ModifierGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModifierGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifierGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifierItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifierGroupId");

                    b.ToTable("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PriceListEntries");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("PriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RangePriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("TimeSpecificPriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaiterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c349f74-1e47-4b6e-8b8f-e38fd7a029f7"),
                            Name = "Menu Settings"
                        },
                        new
                        {
                            Id = new Guid("0b513db6-6ed1-44c5-9615-32f2d74da1e5"),
                            Name = "Cash Register"
                        },
                        new
                        {
                            Id = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a"),
                            Name = "Till"
                        },
                        new
                        {
                            Id = new Guid("fe5da079-9611-47b9-b06d-29222f6b6420"),
                            Name = "Tickets"
                        },
                        new
                        {
                            Id = new Guid("d2bf592c-5eb5-4d41-94c7-1134c70eef9e"),
                            Name = "Table Ordering"
                        },
                        new
                        {
                            Id = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a"),
                            Name = "Kitchen Display System"
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2359bbc4-b941-4841-8137-d2ed6fe4d8d3"),
                            PermissionId = new Guid("1c349f74-1e47-4b6e-8b8f-e38fd7a029f7"),
                            RoleId = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9")
                        },
                        new
                        {
                            Id = new Guid("66d20f75-cc4a-46c8-9243-becbd13d5ff7"),
                            PermissionId = new Guid("0b513db6-6ed1-44c5-9615-32f2d74da1e5"),
                            RoleId = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9")
                        },
                        new
                        {
                            Id = new Guid("0895856f-54d8-4578-82c4-c76a13468fca"),
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a"),
                            RoleId = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9")
                        },
                        new
                        {
                            Id = new Guid("1e0d4aff-e109-4c6f-a36f-28c7fc6d50bc"),
                            PermissionId = new Guid("fe5da079-9611-47b9-b06d-29222f6b6420"),
                            RoleId = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9")
                        },
                        new
                        {
                            Id = new Guid("de467fc3-7ede-442c-b066-54a7fb11270f"),
                            PermissionId = new Guid("d2bf592c-5eb5-4d41-94c7-1134c70eef9e"),
                            RoleId = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9")
                        },
                        new
                        {
                            Id = new Guid("d64f37a2-5638-49d8-98bd-0522cf2b331c"),
                            PermissionId = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a"),
                            RoleId = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("SubPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38bb4e24-3a68-4842-8b84-da3552d6d780"),
                            Name = "Create Category",
                            PermissionId = new Guid("1c349f74-1e47-4b6e-8b8f-e38fd7a029f7")
                        },
                        new
                        {
                            Id = new Guid("7ad67d89-2377-44e4-898f-54599cc6edfa"),
                            Name = "Create Menu",
                            PermissionId = new Guid("1c349f74-1e47-4b6e-8b8f-e38fd7a029f7")
                        },
                        new
                        {
                            Id = new Guid("53e81f34-1630-43bb-a976-b5b94703eeb8"),
                            Name = "Add Item",
                            PermissionId = new Guid("1c349f74-1e47-4b6e-8b8f-e38fd7a029f7")
                        },
                        new
                        {
                            Id = new Guid("cb858b45-8cdb-4bc8-b183-6f1c72dc447a"),
                            Name = "Inventory Management",
                            PermissionId = new Guid("0b513db6-6ed1-44c5-9615-32f2d74da1e5")
                        },
                        new
                        {
                            Id = new Guid("629b1ae5-a3a8-41c6-ba8a-531ca9af9504"),
                            Name = "POS Integration",
                            PermissionId = new Guid("0b513db6-6ed1-44c5-9615-32f2d74da1e5")
                        },
                        new
                        {
                            Id = new Guid("468b229e-a308-450e-9516-d8c2e8fac1de"),
                            Name = "Hardware Integration",
                            PermissionId = new Guid("0b513db6-6ed1-44c5-9615-32f2d74da1e5")
                        },
                        new
                        {
                            Id = new Guid("e172f63e-a92f-423e-831a-14b313cfbb24"),
                            Name = "Order Management",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("081320c9-5dd3-4055-b1f2-8efa99cce621"),
                            Name = "Ticket",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("4514293e-b2f6-449f-997f-cc1cbd608d26"),
                            Name = "Discount",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("1238c73d-4220-4b02-b8dd-8521aea26d48"),
                            Name = "Refunds",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("6c2fc122-3f6e-4934-b1bb-cd19230315e1"),
                            Name = "Cancel Or Void Order",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("7f664624-c85e-4307-b8e1-33d710ea7951"),
                            Name = "Tips",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("788d02fc-b318-41db-9a48-9e09e3936226"),
                            Name = "EOD Balance Of Account",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("cc35524e-f68f-450c-aebb-32acbfcf85a8"),
                            Name = "Sync To Cloud",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("d6cc6b7b-af56-48f6-90a3-2fd6b61b3335"),
                            Name = "Order Chat",
                            PermissionId = new Guid("e1be84dc-e197-463e-a8f0-5915423eb13a")
                        },
                        new
                        {
                            Id = new Guid("3faeec15-af12-4b54-b3f3-ada58bdee3a7"),
                            Name = "View All Tickets",
                            PermissionId = new Guid("fe5da079-9611-47b9-b06d-29222f6b6420")
                        },
                        new
                        {
                            Id = new Guid("b96c2e9c-d2d9-4f33-9827-907e1f0fa8a1"),
                            Name = "View Ticket Status",
                            PermissionId = new Guid("fe5da079-9611-47b9-b06d-29222f6b6420")
                        },
                        new
                        {
                            Id = new Guid("ff500aba-b4d4-453a-ab68-4785d84a7223"),
                            Name = "Void Ticket Transactions",
                            PermissionId = new Guid("fe5da079-9611-47b9-b06d-29222f6b6420")
                        },
                        new
                        {
                            Id = new Guid("8e65b992-45c8-4aa7-acf9-78b89947f6f5"),
                            Name = "Refund Ticket",
                            PermissionId = new Guid("fe5da079-9611-47b9-b06d-29222f6b6420")
                        },
                        new
                        {
                            Id = new Guid("4a886af6-06f7-4cba-b5e2-b48697b4ff24"),
                            Name = "Access Handheld Devices With Pin",
                            PermissionId = new Guid("d2bf592c-5eb5-4d41-94c7-1134c70eef9e")
                        },
                        new
                        {
                            Id = new Guid("45feadf7-1a22-46dc-a726-8fde87fbc8c1"),
                            Name = "Mirror Cash Register Privileges",
                            PermissionId = new Guid("d2bf592c-5eb5-4d41-94c7-1134c70eef9e")
                        },
                        new
                        {
                            Id = new Guid("1a008bc7-e790-4e5c-bac9-35c61e877362"),
                            Name = "View Order",
                            PermissionId = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a")
                        },
                        new
                        {
                            Id = new Guid("f2eadb02-e660-404b-b595-51fe69466644"),
                            Name = "Fulfill Order",
                            PermissionId = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a")
                        },
                        new
                        {
                            Id = new Guid("47745725-12fb-4c42-968f-e20bb35849c8"),
                            Name = "View Order Status",
                            PermissionId = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a")
                        },
                        new
                        {
                            Id = new Guid("32fb0f3e-54e0-4b33-bf83-15933164a47c"),
                            Name = "Edit Order Status",
                            PermissionId = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a")
                        },
                        new
                        {
                            Id = new Guid("8fb175bf-6717-435c-89e6-824ab33bab7a"),
                            Name = "Order Chat",
                            PermissionId = new Guid("a03871eb-adf8-4dc3-9497-ac7d2d162d4a")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuest")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.KYC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderOrBusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BusinessFiscalYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusinessFiscalYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredHomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("708d384d-3f1e-493f-b083-6fa3a6eb3de9"),
                            CreatedBy = "Auto",
                            Description = "Owner",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PincodeVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany("MenuGroups")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuGroups")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuGroup", "MenuGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.ModifierGroup", null)
                        .WithMany("ModifierItems")
                        .HasForeignKey("ModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("Prices")
                        .HasForeignKey("PriceListEntryId");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("RangePrices")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("TimeSpecificPrice")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Tab", "Tab")
                        .WithMany("Orders")
                        .HasForeignKey("TabId");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Guests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Tabs")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RangePrices");

                    b.Navigation("TimeSpecificPrice");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Navigation("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Navigation("MenuGroups");

                    b.Navigation("MenuItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
