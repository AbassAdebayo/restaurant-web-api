// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MenuGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MenuGroupPricingOption")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaxPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuItemPricingOption")
                        .HasColumnType("int");

                    b.Property<decimal?>("MiniPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ModifierGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModifierGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifierGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifierItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifierGroupId");

                    b.ToTable("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PriceListEntries");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("PriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RangePriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("TimeSpecificPriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaiterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.PaymentGateway.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9f499aa-d4d4-49cd-b3e4-a60a778b93d1"),
                            Name = "Menu Settings"
                        },
                        new
                        {
                            Id = new Guid("a142b218-b5aa-43e3-a34b-4e70a85334a5"),
                            Name = "Cash Register"
                        },
                        new
                        {
                            Id = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b"),
                            Name = "Till"
                        },
                        new
                        {
                            Id = new Guid("dd5b567a-2c29-4fb2-b77e-bf7bb792b5c7"),
                            Name = "Tickets"
                        },
                        new
                        {
                            Id = new Guid("683fac62-acd2-4652-8dcc-5a7090967e72"),
                            Name = "Table Ordering"
                        },
                        new
                        {
                            Id = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31"),
                            Name = "Kitchen Display System"
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubPermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubPermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ed2211c-0de6-4467-9a65-12b6c22ec035"),
                            PermissionId = new Guid("f9f499aa-d4d4-49cd-b3e4-a60a778b93d1"),
                            RoleId = new Guid("cb116949-ba67-410e-b532-c4e49294b949")
                        },
                        new
                        {
                            Id = new Guid("de11697e-31e2-4d59-aa05-9a13dab98577"),
                            PermissionId = new Guid("a142b218-b5aa-43e3-a34b-4e70a85334a5"),
                            RoleId = new Guid("cb116949-ba67-410e-b532-c4e49294b949")
                        },
                        new
                        {
                            Id = new Guid("b8e7bb4e-02d7-43cc-8bfc-852731fe0f29"),
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b"),
                            RoleId = new Guid("cb116949-ba67-410e-b532-c4e49294b949")
                        },
                        new
                        {
                            Id = new Guid("9f5c5309-f2ca-4943-8412-f44a31f53241"),
                            PermissionId = new Guid("dd5b567a-2c29-4fb2-b77e-bf7bb792b5c7"),
                            RoleId = new Guid("cb116949-ba67-410e-b532-c4e49294b949")
                        },
                        new
                        {
                            Id = new Guid("9ea0f660-043c-4fad-b00b-5f01d948810b"),
                            PermissionId = new Guid("683fac62-acd2-4652-8dcc-5a7090967e72"),
                            RoleId = new Guid("cb116949-ba67-410e-b532-c4e49294b949")
                        },
                        new
                        {
                            Id = new Guid("97cd6f36-4903-4b97-89e6-63cb59bd3e6f"),
                            PermissionId = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31"),
                            RoleId = new Guid("cb116949-ba67-410e-b532-c4e49294b949")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("SubPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5524284-075e-4412-b146-d1a2fb9cb20a"),
                            Name = "Create Category",
                            PermissionId = new Guid("f9f499aa-d4d4-49cd-b3e4-a60a778b93d1")
                        },
                        new
                        {
                            Id = new Guid("6613bc9b-c152-4bac-9016-8b2870ec66b1"),
                            Name = "Create Menu",
                            PermissionId = new Guid("f9f499aa-d4d4-49cd-b3e4-a60a778b93d1")
                        },
                        new
                        {
                            Id = new Guid("1e2f2276-bdb3-49f3-91c6-2edd27ec4ace"),
                            Name = "Add Item",
                            PermissionId = new Guid("f9f499aa-d4d4-49cd-b3e4-a60a778b93d1")
                        },
                        new
                        {
                            Id = new Guid("20c31399-1427-4e0b-9900-6ab827185025"),
                            Name = "Inventory Management",
                            PermissionId = new Guid("a142b218-b5aa-43e3-a34b-4e70a85334a5")
                        },
                        new
                        {
                            Id = new Guid("d1192028-5033-40ec-b871-c96cef9252ed"),
                            Name = "POS Integration",
                            PermissionId = new Guid("a142b218-b5aa-43e3-a34b-4e70a85334a5")
                        },
                        new
                        {
                            Id = new Guid("dffbf553-4722-48f0-9179-e6589bd0bd89"),
                            Name = "Hardware Integration",
                            PermissionId = new Guid("a142b218-b5aa-43e3-a34b-4e70a85334a5")
                        },
                        new
                        {
                            Id = new Guid("dc9b433e-c7b1-4023-bf73-b87c4d53a7b9"),
                            Name = "Order Management",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("61e39a2a-0db1-43bb-adac-617e73504416"),
                            Name = "Ticket",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("cdc36085-e200-4c2b-b807-27c569dbb1eb"),
                            Name = "Discount",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("645291df-8563-4945-891f-4591bc572d59"),
                            Name = "Refunds",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("c88b91c3-80ba-4e41-ad87-fcfc34d4255f"),
                            Name = "Cancel Or Void Order",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("41ce2cf1-54fd-45b3-a2c0-d54a44ce3a64"),
                            Name = "Tips",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("156cb5f6-fdb0-4b29-a9f8-fe52aaf2b97a"),
                            Name = "EOD Balance Of Account",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("cbbf6797-2911-4f99-b9e6-f785317f0ea4"),
                            Name = "Sync To Cloud",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("cce7598a-19a0-4743-973d-4c1df69adde7"),
                            Name = "Order Chat",
                            PermissionId = new Guid("f11e1aec-efe2-401d-9715-6bba98b1313b")
                        },
                        new
                        {
                            Id = new Guid("899fdc2b-4948-44f5-b0e1-8940870b4c3f"),
                            Name = "View All Tickets",
                            PermissionId = new Guid("dd5b567a-2c29-4fb2-b77e-bf7bb792b5c7")
                        },
                        new
                        {
                            Id = new Guid("7f96d396-dc0b-446c-9030-83730c4cac14"),
                            Name = "View Ticket Status",
                            PermissionId = new Guid("dd5b567a-2c29-4fb2-b77e-bf7bb792b5c7")
                        },
                        new
                        {
                            Id = new Guid("58978779-860f-4644-a74c-f5a78d835c26"),
                            Name = "Void Ticket Transactions",
                            PermissionId = new Guid("dd5b567a-2c29-4fb2-b77e-bf7bb792b5c7")
                        },
                        new
                        {
                            Id = new Guid("e4db0471-01a7-4a6f-82a4-a510ec589d74"),
                            Name = "Refund Ticket",
                            PermissionId = new Guid("dd5b567a-2c29-4fb2-b77e-bf7bb792b5c7")
                        },
                        new
                        {
                            Id = new Guid("98364e85-765d-45e9-9cfa-df3c273dae8a"),
                            Name = "Access Handheld Devices With Pin",
                            PermissionId = new Guid("683fac62-acd2-4652-8dcc-5a7090967e72")
                        },
                        new
                        {
                            Id = new Guid("c704ec3e-bc49-48e8-b94a-acf760398a9c"),
                            Name = "Mirror Cash Register Privileges",
                            PermissionId = new Guid("683fac62-acd2-4652-8dcc-5a7090967e72")
                        },
                        new
                        {
                            Id = new Guid("9fffe096-8900-40b2-a6ca-3e5136d6947a"),
                            Name = "View Order",
                            PermissionId = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31")
                        },
                        new
                        {
                            Id = new Guid("d59a28d9-dbf8-42ae-a6b1-b7b0419edfcd"),
                            Name = "Fulfill Order",
                            PermissionId = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31")
                        },
                        new
                        {
                            Id = new Guid("a451cfd0-787c-4817-80f1-28bf9d27e69f"),
                            Name = "View Order Status",
                            PermissionId = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31")
                        },
                        new
                        {
                            Id = new Guid("4fece294-363f-46a8-99bb-44320baab8c1"),
                            Name = "Edit Order Status",
                            PermissionId = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31")
                        },
                        new
                        {
                            Id = new Guid("a1c9ed38-a9b6-4717-86c2-2019d8584d42"),
                            Name = "Order Chat",
                            PermissionId = new Guid("6f63571f-d12d-49ab-b312-cf418d9bcc31")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuest")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.KYC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderOrBusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BusinessFiscalYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusinessFiscalYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredHomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb116949-ba67-410e-b532-c4e49294b949"),
                            CreatedBy = "Auto",
                            Description = "Owner",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PincodeVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany("MenuGroups")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuGroups")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuGroup", "MenuGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.ModifierGroup", null)
                        .WithMany("ModifierItems")
                        .HasForeignKey("ModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("Prices")
                        .HasForeignKey("PriceListEntryId");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("RangePrices")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("TimeSpecificPrice")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Tab", "Tab")
                        .WithMany("Orders")
                        .HasForeignKey("TabId");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.PaymentGateway.Payment", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Domain.Domain.Modules.PaymentGateway.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.SubPermission", "SubPermission")
                        .WithMany()
                        .HasForeignKey("SubPermissionId");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("SubPermission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Guests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Tabs")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RangePrices");

                    b.Navigation("TimeSpecificPrice");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Navigation("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Navigation("MenuGroups");

                    b.Navigation("MenuItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
