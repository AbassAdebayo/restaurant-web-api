// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240205101112_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MenuGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MenuGroupPricingOption")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaxPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuItemPricingOption")
                        .HasColumnType("int");

                    b.Property<decimal?>("MiniPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ModifierGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModifierGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifierGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifierItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifierGroupId");

                    b.ToTable("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PriceListEntries");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("PriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RangePriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("TimeSpecificPriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaiterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8af0f98-cc43-46b2-99d3-5fe771867c2e"),
                            Name = "Menu Settings"
                        },
                        new
                        {
                            Id = new Guid("088a7ed8-e301-42ef-a3b1-ad44c72b3e3e"),
                            Name = "Cash Register"
                        },
                        new
                        {
                            Id = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1"),
                            Name = "Till"
                        },
                        new
                        {
                            Id = new Guid("4c07ccd7-da62-40be-af55-1df76c0e402a"),
                            Name = "Tickets"
                        },
                        new
                        {
                            Id = new Guid("3cde5c36-4722-48d2-a136-52cfa5447ef6"),
                            Name = "Table Ordering"
                        },
                        new
                        {
                            Id = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345"),
                            Name = "Kitchen Display System"
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubPermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubPermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbc62572-ed51-4087-89b4-409d84e4ca82"),
                            PermissionId = new Guid("e8af0f98-cc43-46b2-99d3-5fe771867c2e"),
                            RoleId = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21")
                        },
                        new
                        {
                            Id = new Guid("3f8481d5-d1ff-4ade-a80b-29ce59a6023b"),
                            PermissionId = new Guid("088a7ed8-e301-42ef-a3b1-ad44c72b3e3e"),
                            RoleId = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21")
                        },
                        new
                        {
                            Id = new Guid("eeedb051-a3ff-46f0-89d3-862b78ff90f3"),
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1"),
                            RoleId = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21")
                        },
                        new
                        {
                            Id = new Guid("bc5bc554-96bc-4751-bd12-232af01c1f1f"),
                            PermissionId = new Guid("4c07ccd7-da62-40be-af55-1df76c0e402a"),
                            RoleId = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21")
                        },
                        new
                        {
                            Id = new Guid("98e44d46-0ea8-493d-a2ff-606172c3b8be"),
                            PermissionId = new Guid("3cde5c36-4722-48d2-a136-52cfa5447ef6"),
                            RoleId = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21")
                        },
                        new
                        {
                            Id = new Guid("0d635805-1298-435d-93eb-5bb0c8164a4d"),
                            PermissionId = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345"),
                            RoleId = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("SubPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ad57654-0dee-4a93-86df-43658016a03a"),
                            Name = "Create Category",
                            PermissionId = new Guid("e8af0f98-cc43-46b2-99d3-5fe771867c2e")
                        },
                        new
                        {
                            Id = new Guid("4485f558-2427-467d-97ab-334acd7f316a"),
                            Name = "Create Menu",
                            PermissionId = new Guid("e8af0f98-cc43-46b2-99d3-5fe771867c2e")
                        },
                        new
                        {
                            Id = new Guid("d438832f-3095-4407-b49a-d68315177da7"),
                            Name = "Add Item",
                            PermissionId = new Guid("e8af0f98-cc43-46b2-99d3-5fe771867c2e")
                        },
                        new
                        {
                            Id = new Guid("d2d3a010-6c95-48e1-89db-50d5296ea235"),
                            Name = "Inventory Management",
                            PermissionId = new Guid("088a7ed8-e301-42ef-a3b1-ad44c72b3e3e")
                        },
                        new
                        {
                            Id = new Guid("49da926e-bb1d-4490-9055-9fe85a487362"),
                            Name = "POS Integration",
                            PermissionId = new Guid("088a7ed8-e301-42ef-a3b1-ad44c72b3e3e")
                        },
                        new
                        {
                            Id = new Guid("11f411bf-b364-422f-8774-63255204974a"),
                            Name = "Hardware Integration",
                            PermissionId = new Guid("088a7ed8-e301-42ef-a3b1-ad44c72b3e3e")
                        },
                        new
                        {
                            Id = new Guid("499f0967-79c7-432b-badb-6e738bba91a3"),
                            Name = "Order Management",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("16db0e75-de8e-4c06-a8f8-2e61ae459a9e"),
                            Name = "Ticket",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("36cd63a3-6125-46b6-8a2c-8e50ac435783"),
                            Name = "Discount",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("eea378bb-765b-4373-8579-0a025421ea7d"),
                            Name = "Refunds",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("75334307-f5ae-4db1-8f3b-99b9ed26f217"),
                            Name = "Cancel Or Void Order",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("e2e0e295-21f3-46e2-8a0e-1568cbaf8f6d"),
                            Name = "Tips",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("28a9e0e1-a6f5-4c9f-9edf-3c1914e4073a"),
                            Name = "EOD Balance Of Account",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("9b32c784-a4e5-413b-984e-524a9fa4dd6b"),
                            Name = "Sync To Cloud",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("f523e2c1-7d27-42b2-979f-9df6ee40fef9"),
                            Name = "Order Chat",
                            PermissionId = new Guid("1f97b4c0-dc80-4c27-bb39-a7eb179c38a1")
                        },
                        new
                        {
                            Id = new Guid("c7b1e46e-c1d0-4983-91e1-c0ff5fdb7356"),
                            Name = "View All Tickets",
                            PermissionId = new Guid("4c07ccd7-da62-40be-af55-1df76c0e402a")
                        },
                        new
                        {
                            Id = new Guid("eec9789c-c410-440b-813c-783775e4ce37"),
                            Name = "View Ticket Status",
                            PermissionId = new Guid("4c07ccd7-da62-40be-af55-1df76c0e402a")
                        },
                        new
                        {
                            Id = new Guid("8f9f0e4e-ecf0-40f4-bd16-23c1f4445988"),
                            Name = "Void Ticket Transactions",
                            PermissionId = new Guid("4c07ccd7-da62-40be-af55-1df76c0e402a")
                        },
                        new
                        {
                            Id = new Guid("5453f0bc-48a2-47ad-b347-1f29bb75e291"),
                            Name = "Refund Ticket",
                            PermissionId = new Guid("4c07ccd7-da62-40be-af55-1df76c0e402a")
                        },
                        new
                        {
                            Id = new Guid("c12811c0-693c-417e-8e8f-8575f184a89f"),
                            Name = "Access Handheld Devices With Pin",
                            PermissionId = new Guid("3cde5c36-4722-48d2-a136-52cfa5447ef6")
                        },
                        new
                        {
                            Id = new Guid("56362818-0726-4c80-b8fa-da1c2f869665"),
                            Name = "Mirror Cash Register Privileges",
                            PermissionId = new Guid("3cde5c36-4722-48d2-a136-52cfa5447ef6")
                        },
                        new
                        {
                            Id = new Guid("23ddd78b-34fa-4400-98a0-2390522c619e"),
                            Name = "View Order",
                            PermissionId = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345")
                        },
                        new
                        {
                            Id = new Guid("f8cc6d11-82a5-49b5-a9a6-65fd3d26b237"),
                            Name = "Fulfill Order",
                            PermissionId = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345")
                        },
                        new
                        {
                            Id = new Guid("0f6ae32e-f61a-42c1-92db-5203599f7f1a"),
                            Name = "View Order Status",
                            PermissionId = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345")
                        },
                        new
                        {
                            Id = new Guid("8aaa80df-bc18-47c8-b644-c1e2671d07e5"),
                            Name = "Edit Order Status",
                            PermissionId = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345")
                        },
                        new
                        {
                            Id = new Guid("c6edf066-9018-4eab-a1b9-f44a8f0cc0c4"),
                            Name = "Order Chat",
                            PermissionId = new Guid("1b415ce8-b355-412a-89eb-fa198e1a9345")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuest")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.KYC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderOrBusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BusinessFiscalYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusinessFiscalYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredHomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73f9be25-1e41-4ed8-90c1-5c9a15bf0b21"),
                            CreatedBy = "Auto",
                            Description = "Owner",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PincodeVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany("MenuGroups")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuGroups")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuGroup", "MenuGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.ModifierGroup", null)
                        .WithMany("ModifierItems")
                        .HasForeignKey("ModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("Prices")
                        .HasForeignKey("PriceListEntryId");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("RangePrices")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("TimeSpecificPrice")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Tab", "Tab")
                        .WithMany("Orders")
                        .HasForeignKey("TabId");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.SubPermission", "SubPermission")
                        .WithMany()
                        .HasForeignKey("SubPermissionId");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("SubPermission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Guests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Tabs")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RangePrices");

                    b.Navigation("TimeSpecificPrice");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Navigation("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Navigation("MenuGroups");

                    b.Navigation("MenuItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
