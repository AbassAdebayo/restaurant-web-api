// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240118154641_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MenuGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MenuGroupPricingOption")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaxPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MenuGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuItemPricingOption")
                        .HasColumnType("int");

                    b.Property<decimal?>("MiniPriceRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ModifierGroupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModifierGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifierGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifierItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModifierGroupId");

                    b.ToTable("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PriceListEntries");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListEntryId");

                    b.ToTable("PriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RangePriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("TimeSpecificPriceOptions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaiterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88bbf4a1-3a48-496d-ad41-43ab930c1c3e"),
                            Name = "Menu Settings"
                        },
                        new
                        {
                            Id = new Guid("901f8ab3-a552-415b-8844-c5f31e4285fe"),
                            Name = "Cash Register"
                        },
                        new
                        {
                            Id = new Guid("dc75d111-d3a0-433a-b815-860eead0b275"),
                            Name = "Till"
                        },
                        new
                        {
                            Id = new Guid("65ec4455-05bb-4012-a89f-91203f6c8bd8"),
                            Name = "Tickets"
                        },
                        new
                        {
                            Id = new Guid("abb4a95b-7b38-4920-b6cf-584975cb26c8"),
                            Name = "Table Ordering"
                        },
                        new
                        {
                            Id = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2"),
                            Name = "Kitchen Display System"
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34402c88-1b7b-4386-b965-cd3f154d5d37"),
                            PermissionId = new Guid("88bbf4a1-3a48-496d-ad41-43ab930c1c3e"),
                            RoleId = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70")
                        },
                        new
                        {
                            Id = new Guid("0eb45329-e6cc-4c0e-a72f-ca688e616f84"),
                            PermissionId = new Guid("901f8ab3-a552-415b-8844-c5f31e4285fe"),
                            RoleId = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70")
                        },
                        new
                        {
                            Id = new Guid("19f47311-e732-44a3-bad2-201ff0d18ee7"),
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275"),
                            RoleId = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70")
                        },
                        new
                        {
                            Id = new Guid("9bedf81e-e63c-4da0-8d8d-eb7d560846d1"),
                            PermissionId = new Guid("65ec4455-05bb-4012-a89f-91203f6c8bd8"),
                            RoleId = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70")
                        },
                        new
                        {
                            Id = new Guid("2d6f2536-f730-4b02-8844-50f2d1fa003e"),
                            PermissionId = new Guid("abb4a95b-7b38-4920-b6cf-584975cb26c8"),
                            RoleId = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70")
                        },
                        new
                        {
                            Id = new Guid("66e4bad1-b700-4708-b13c-907a7c1d0ed7"),
                            PermissionId = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2"),
                            RoleId = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("SubPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d94b0c7-7060-4618-a481-cbb045ecd64b"),
                            Name = "Create Category",
                            PermissionId = new Guid("88bbf4a1-3a48-496d-ad41-43ab930c1c3e")
                        },
                        new
                        {
                            Id = new Guid("4a300bc5-2fb7-4131-b019-e227d08849cd"),
                            Name = "Create Menu",
                            PermissionId = new Guid("88bbf4a1-3a48-496d-ad41-43ab930c1c3e")
                        },
                        new
                        {
                            Id = new Guid("153c16fc-55cf-46e3-b124-0d7273ba9c9a"),
                            Name = "Add Item",
                            PermissionId = new Guid("88bbf4a1-3a48-496d-ad41-43ab930c1c3e")
                        },
                        new
                        {
                            Id = new Guid("7024b2fd-e5f0-4a64-9e69-0294a431d0ff"),
                            Name = "Inventory Management",
                            PermissionId = new Guid("901f8ab3-a552-415b-8844-c5f31e4285fe")
                        },
                        new
                        {
                            Id = new Guid("dba87ec5-4019-4adf-85b2-20ad5061f29f"),
                            Name = "POS Integration",
                            PermissionId = new Guid("901f8ab3-a552-415b-8844-c5f31e4285fe")
                        },
                        new
                        {
                            Id = new Guid("ee7fa12a-0b0b-4c76-b6be-c3b6e63c0424"),
                            Name = "Hardware Integration",
                            PermissionId = new Guid("901f8ab3-a552-415b-8844-c5f31e4285fe")
                        },
                        new
                        {
                            Id = new Guid("685d3591-e984-4fba-9b04-6f6975e74419"),
                            Name = "Order Management",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("a2bd1b6a-edf2-45d0-959d-b2d17dd9f176"),
                            Name = "Ticket",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("4d133fe8-799c-4bc8-a0e9-c71cdf6fbc3c"),
                            Name = "Discount",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("637721a8-8c36-4ec6-8575-58caa9bcf38c"),
                            Name = "Refunds",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("535f0cf1-6110-4f94-9ed8-bfda8084d056"),
                            Name = "Cancel Or Void Order",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("340a9fc4-d96a-4abe-9dc2-f6dc11551b3b"),
                            Name = "Tips",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("64189302-5df1-415a-869c-8154df9d93cd"),
                            Name = "EOD Balance Of Account",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("607fcff5-d2d7-4311-91f4-e062c53e9cf2"),
                            Name = "Sync To Cloud",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("55f1c2dc-bea6-4558-b9e6-db7e026dea23"),
                            Name = "Order Chat",
                            PermissionId = new Guid("dc75d111-d3a0-433a-b815-860eead0b275")
                        },
                        new
                        {
                            Id = new Guid("6d2d554a-cf6e-4eff-9fd4-beef65f6d921"),
                            Name = "View All Tickets",
                            PermissionId = new Guid("65ec4455-05bb-4012-a89f-91203f6c8bd8")
                        },
                        new
                        {
                            Id = new Guid("ef43c373-9d49-4fe9-85e4-b5fde2a5a8b5"),
                            Name = "View Ticket Status",
                            PermissionId = new Guid("65ec4455-05bb-4012-a89f-91203f6c8bd8")
                        },
                        new
                        {
                            Id = new Guid("adf254b6-16c2-432c-a4ee-31e296544f2d"),
                            Name = "Void Ticket Transactions",
                            PermissionId = new Guid("65ec4455-05bb-4012-a89f-91203f6c8bd8")
                        },
                        new
                        {
                            Id = new Guid("ff2ee0f0-dd95-4e06-b8f5-a68cc506fcf2"),
                            Name = "Refund Ticket",
                            PermissionId = new Guid("65ec4455-05bb-4012-a89f-91203f6c8bd8")
                        },
                        new
                        {
                            Id = new Guid("3929d13d-03b7-4c7c-a547-b345e1dd92a9"),
                            Name = "Access Handheld Devices With Pin",
                            PermissionId = new Guid("abb4a95b-7b38-4920-b6cf-584975cb26c8")
                        },
                        new
                        {
                            Id = new Guid("709314ed-159d-4b77-9abf-75be001df594"),
                            Name = "Mirror Cash Register Privileges",
                            PermissionId = new Guid("abb4a95b-7b38-4920-b6cf-584975cb26c8")
                        },
                        new
                        {
                            Id = new Guid("63e41f19-f911-4d23-a95e-721442823fd1"),
                            Name = "View Order",
                            PermissionId = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2")
                        },
                        new
                        {
                            Id = new Guid("a9bb756a-d8f0-4f69-b319-9aaff6d8b9f1"),
                            Name = "Fulfill Order",
                            PermissionId = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2")
                        },
                        new
                        {
                            Id = new Guid("cc97540d-df9a-4b4c-a734-885b844a2f5b"),
                            Name = "View Order Status",
                            PermissionId = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2")
                        },
                        new
                        {
                            Id = new Guid("33b0a1d1-2da6-468c-8772-02e23286221f"),
                            Name = "Edit Order Status",
                            PermissionId = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2")
                        },
                        new
                        {
                            Id = new Guid("9bda32bf-8c09-4c5d-ad53-fa45236c29a9"),
                            Name = "Order Chat",
                            PermissionId = new Guid("d67b9497-dce0-48e5-8770-30b8e7517ac2")
                        });
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuest")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.KYC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderOrBusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BusinessFiscalYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BusinessFiscalYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredHomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d0486f2-c7d0-4aff-941d-a9b34e6a1b70"),
                            CreatedBy = "Auto",
                            Description = "Owner",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PincodeVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany("MenuGroups")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuGroups")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuGroup", "MenuGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("PriceListEntryId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.ModifierGroup", null)
                        .WithMany("ModifierItems")
                        .HasForeignKey("ModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.PriceListEntry", null)
                        .WithMany("Prices")
                        .HasForeignKey("PriceListEntryId");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.RangePriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("RangePrices")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.TimeSpecificPriceOption", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", null)
                        .WithMany("TimeSpecificPrice")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Tab", "Tab")
                        .WithMany("Orders")
                        .HasForeignKey("TabId");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.OrderItem", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Domain.Modules.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.SubPermission", b =>
                {
                    b.HasOne("Domain.Domain.Modules.RolePermission.Entities.Permission", "Permission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Guest", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Guests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.HasOne("Domain.Domain.Modules.Tables.Table", "Table")
                        .WithMany("Tabs")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.HasOne("Domain.Domain.Modules.MenuSettings.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Users.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.Menu", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuGroup", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.MenuItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RangePrices");

                    b.Navigation("TimeSpecificPrice");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.ModifierGroup", b =>
                {
                    b.Navigation("ModifierItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.MenuSettings.PriceListEntry", b =>
                {
                    b.Navigation("MenuGroups");

                    b.Navigation("MenuItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.Domain.Modules.RolePermission.Entities.Permission", b =>
                {
                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Tab", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Domain.Modules.Tables.Table", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
